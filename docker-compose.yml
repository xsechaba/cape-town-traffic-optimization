services:
  # Apache Kafka and Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: traffic-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: traffic-kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: traffic-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: traffic-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092

  # TimescaleDB for time-series data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: traffic-timescaledb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: traffic_optimization
      POSTGRES_USER: traffic_user
      POSTGRES_PASSWORD: traffic_password
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: traffic-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes



  # FastAPI Backend
  traffic-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: traffic-fastapi
    ports:
      - "8000:8000"
    depends_on:
      - timescaledb
      - redis
      - kafka
    environment:
      DATABASE_URL: postgresql://traffic_user:traffic_password@timescaledb:5432/traffic_optimization
      REDIS_URL: redis://redis:6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    volumes:
      - ./backend:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # React Frontend
  traffic-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: traffic-react-frontend
    ports:
      - "3000:3000"
    depends_on:
      - traffic-api
    environment:
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_WEBSOCKET_URL: ws://localhost:8000/ws



volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  timescaledb-data:
  redis-data:

networks:
  default:
    name: traffic-optimization-network 